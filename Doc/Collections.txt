Collections - 

A name beginning with Hash uses a hashing and mapping strategy internally, although the key values usually have no meaning (the hashing approach attempts to provide an efficient and approximately equal lookup time for any element).
A name beginning with Linked uses a linking strategy to preserve the order of insertion and is optimized for insertion/deletion as opposed to appending or iterating.
A name beginning with Tree uses a binary tree to impose an ordering scheme, either the natural order of the elements (as specified by the Comparable interface implemented by many classes including String and the numeric wrapper classes) or an order dictated by a special helper class object (a Comparator).

List
- Store elements in ordered way, allow duplicates,allow null(multiple)
- maintains insertion order of elements

Implementation
- ArrayList
implemented using resizeable array
searching or getting element is fast bcoz of index.
insertions are difficult as you need to resize list and needs to updates index if you insert something anywhere except at the end
add and remove slow. getting element is fast
removing elements is slow as you need to rearrange all elements
Has less memory overhead bcoz each index only holds object data
not synchronized

- LinkedList
- using doubly linkedlist
doesnot provide indexed or random access, searching is slow, need to travers to req element
Insertions and removals are easy and fast. Add and remove fast. get slow 
Has more memory overhead bcoz each node holds data and address of next and previous node
not synchronized

- Vector
similar to arraylist but it is synchronized

Set
- Store elements in unorderd or shuffle way,does not allow duplicates,allow only one null
Sets do not support any indexed retrieval.

Implementation
-HashSet
uses hashtable to store the elements. implemented using hashtable. not ordered
can have atmost one null element.
fastest set

-LinkedHashSet
implemented as a hashtable with a linkedlist running through it. order of insertion.
can have atmost one null  element.

-TreeSet
contains unique elements only like HashSet. The TreeSet class implements NavigableSet interface that extends the SortedSet interface.
maintains ascending order.
cannot have null elements as compareTo method gives NullPointerException.
It is slower bcoz it is sorted
SortedSet Interface
- store in stored order defined by comparable or comparator interface

Set uses equals() method to check uniqueness and SortedSet/TreeSet uses compareTo() method to sort the elements. Both methods should be consistent for element to behave properly in Set and SortedSet

Map
- key value pair, key cannot be null
- duplicate key will override the existing value

HashMap
A HashMap contains values based on the key. It implements the Map interface and extends AbstractMap class.
It contains only unique elements.
It may have one null key and multiple null values.
HashMap is implemented as a hash table, and there is no ordering on keys or values.
If key of the HashMap is self-defined objects, then equals() and hashCode() contract need to be followed.

LinkedHashMap
A LinkedHashMap contains values based on the key. It implements the Map interface and extends HashMap class.
It contains only unique elements.
It may have one null key and multiple null values.
It is same as HashMap instead maintains insertion order.


TreeMap
A TreeMap contains values based on the key. It implements the NavigableMap interface and extends AbstractMap class.
It contains only unique elements.
It cannot have null key but can have multiple null values.
It is same as HashMap instead maintains ascending order.
TreeMap is implemented based on red-black tree structure, and it is ordered by the key.
If key of the TreeMap is self-defined objects, then it object should implement Comparable interface otherwise exception will be thrown.
TreeMaps are sorted by keys, the object for key has to be able to compare with each other, thatâ€™s why it has to implement Comparable interface.If you use String as key, because String implements Comparable interface.

Hashtable
Hashtable is synchronized, in contrast to HashMap.
It has overhead for synchronization.
It doesnot permit null keys.


